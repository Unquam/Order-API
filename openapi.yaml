openapi: 3.0.3
info:
  title: Orders Application API
  description: Orders Application Programming Interface.
  contact:
    email: "diamik@gmail.com"
  version: 1.0.0
servers:
  - url: 'NOT YET IMPLEMENTED'
    description: 'NOT YET IMPLEMENTED'
tags:
  - name: "Orders"
    description: "Methods for working with orders"
paths:
  /v1/orders:
    get:
      tags:
        - "Orders"
      summary: Get all orders / Get orders by status
      operationId: getOrders
      parameters:
        - in: query
          name: status
          required: false
          description: Order status
          schema:
            type: string
            example: "pending"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                    id:
                      type: integer
                      example: 1
                    order_number:
                      type: string
                      example: "W1P31K47"
                    total_amount:
                      type: number
                      example: 100.00
                    products:
                      type: array
                      items:
                        type: object
                        properties:
                          product_name:
                            type: string
                            example: LG
                          quantity:
                            type: integer
                            example: 10
                          price:
                            type: number
                            example: 10.00
                    status:
                        type: string
                        example: "pending"
                    created_at:
                        type: string
                        example: "2024-10-20 20:12:40"
                    update_at:
                      type: string
                      example: "2024-10-20 20:12:40"
        404:
          description: Empty Orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Empty Orders"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Response'
  /v1/orders/{order_number}:
    get:
      tags:
        - "Orders"
      summary: Get order by order number
      operationId: getOrder
      parameters:
        - in: path
          name: order_number
          required: true
          description: Unique identifier of the order
          schema:
            type: string
            example: "W1P31K47"
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  order_number:
                    type: string
                    example: "W1P31K47"
                  total_amount:
                    type: number
                    example: 100.00
                  status:
                    type: string
                    example: "pending"
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        product_name:
                          type: string
                          example: LG
                        quantity:
                          type: integer
                          example: 10
                        price:
                          type: number
                          example: 10.00
                  created_at:
                    type: string
                    example: "2024-10-20 20:12:40"
                  update_at:
                    type: string
                    example: "2024-10-20 20:12:40"
        404:
          description: Order not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order not found"
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Response'
  /v1/order/create:
    parameters:
      - in: query
        name: total_amount
        required: true
        description: Total amount
        schema:
          type: number
          example: 100.00
      - in: query
        name: products
        required: true
        description: Products
        schema:
          type: array
          items:
            type: object
            properties:
              product_name:
                type: string
                example: LG
              quantity:
                type: integer
                example: 10
              price:
                type: number
                example: 10.00
    post:
      tags:
        - "Orders"
      summary: Create order
      operationId: createOrder
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                      type: boolean
                      example: true
                  message:
                      type: string
                      example: "Order created successfully"
                  data:
                    type: object
                    properties:
                      total_amount:
                        type: number
                        example: 100.00
                      products:
                        type: array
                        items:
                          type: object
                          properties:
                            product_name:
                              type: string
                              example: LG
                            quantity:
                              type: integer
                              example: 10
                            price:
                              type: number
                              example: 10.00
                      created_at:
                        type: string
                        example: "2024-10-20T17:27:53.000000Z"
                      update_at:
                        type: string
                        example: "2024-10-20T17:27:53.000000Z"
                      id:
                        type: integer
                        example: 1
                      order_number:
                        type: string
                        example: "W1P31K47"
        404:
          description: Order not created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order not created"
        422:
          description: The given data was invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/422Response'
        500:
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500Response'
components:
  schemas:
    # Requests
    422Response:
      type: object
      properties:
        message:
          type: string
          example: "The given data was invalid."
        errors:
          type: array
          items:
            type: object
    500Response:
      type: object
      properties:
        message:
          type: string
          default: "Server Error"